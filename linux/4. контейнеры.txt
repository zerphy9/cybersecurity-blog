контейнеризация:
	технология, которая позволяет упаковать программу и все ее зависимости (настройки, файлы, библиотеки) в один контейнер - чтобы программа могла работать на разных средах
	в отличии от виртуальных машин, контейнеры используют основную систему, что позволяет программе работать быстрее

Docker:
	платформа для автоматизации развертывания приложений в виде автономных блоков - контейнеров
	запуск контейнера Docker выполняется следующим образом:
		1. создается Dockerfile - файл, содержащий инструкцию для движка о том как собирать контейнер
			готовый Dockerfile можно скачать из DockerHub, или все же создать его самому
		2. с помощью команды build сохраняем Dockerfile в виде образа в локальной папке Docker Engine
			docker build -t FS_docker
		3. теперь можно запустить контейнер из образа
			примерный синтаксис: docker run -p 8022:22 -p 8080:80 -d FS_docker
		тем самым запускается контейнер из образа FS_docker с хостами 8022 и 8080 и портами контейнера 22 и 80 соответственно
	команды:
		docker ps: перечислить все запущенные контейнеры
		docker stop: остановить работающий контейнер
		docker start: запустить остановленный контейнер
		docker restart: перезапустить работающий контейнер
		docker rm: достать контейнер
		docker rmi: удалить изображение Docker
		docker logs: посмотреть журналы контейнера

контейнеры Linux (LXC):
	базовая технология, которая обеспечивает изоляцию и работу приложений внутри ОС
	в отличии от Docker, LXC предоставляет меньшую универсальность, более сложное управление - вручную
	установленный контейнер лежит по умолчанию в: /var/lib/lxc/<container>
	работа с контейнером LXC:
		команды для создания/удаления/копирования контейнера:
			lxc-create -n <container> -t ubuntu: создать контейнер на основе системы ubuntu
			lxc-clone -o <original_cont> -n <clone_cont>: позволяет создать контейнер на основе другого контейнера
			lxc-snapshot -n <container>: для создания точки сохранения контейнера для его будущего восстановления
				lxc-snapshot -n <container> -r snap0: восстановить контейнер на основе точки сохранения
				точки сохранения хранятся: /home/<username>/.local/share/lxc/<container>/snaps/
			lxc-destroy -n <container>: удалить контейнер
		команды для получения информации о контейнере:
			lxc-ls: перечислить все существующие контейнеры
			lxc-info -n <container>: информация о контейнере
		команды для взаимодействия с контейнером:
			lxc-stop -n <container>: остановить работающий контейнер
			lxc-start -n <container>: запустить остановленный контейнер
			lxc-restart -n <container>: перезапустить работающий контейнер
			lxc-config -n <container> -s storage: управлять контейнерным хранилищем
			lxc-config -n <container> -s network: управлять настройками контейнерной сети
			lxc-config -n <container> -s security: управление настройками безопасности контейнера
			lxc-attach -n <container>: подсоединиться к контейнеру
			lxc-attach -n <container> -f <fileway>: предоставить контейнеру общий доступ к каталогу или файлу
	безопасность системы от воздействий контейнера (LXC менее защищен чем Docker):
		1. ограничение доступа к контейнеру: отключение ненужных служб, использовать безопасные протоколы
		2. ограничение ресурсов компьютера - корректируя файл конфигурации в /var/lib/lxc/<container>/config
			lxc.cgroup.cpu.shares = 512: корректировка процессорного времени, по умолчанию 1024
			lxc.cgroup.cpuset.cpus = 0: указание доступных ядер для контейнера (доступно только первое ядро 0)
			lxc.cgroup.memory.limit_in_bytes = 512M: задать обьем оперативной памяти
		3. изоляция контейнера от хоста
		4. обеспечение обязательного контроля доступа
		5. поддержание контейнера в актуальном состоянии
