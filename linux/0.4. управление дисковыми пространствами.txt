резервное копирование:
	Rsync - инструмент для быстрого создания резервной копии. 
		его преимущество - сохранение только измененных фрагментов файлов. особенно полезен для сетевых передач
		имя пакета для установки: rsync
		примерный синтаксис:
			для отправки на удаленный хост: rsync -av /path/to/mydirectory user@backup_server:/path/to/backup/directory
			для восстановления с удаленного хоста: rsync -av user@remote_host:/path/to/backup/directory /path/to/mydirectory
		опции:
			-a: для сохранения исходных атрибутов файла (разрешения, временные метки и т.д.)
			-v: обеспечивает подробный вывод хода выполнения rsync
			-z: для сжатия файлов, для более быстрой передачи
			-e ssh: для выбора сети подключения к удаленному хосту 
	Duplicity - инструмент на базе Rsync, с добавлением шифрования для защиты копий
	Deja Dup - инструмент на базе Duplicity, с поддержкой графического интерфейса
	настройка автоматической передачи резервной копии на удаленное устройство с помощью cron:
		1. для того, чтобы обеспечить шифрование ssh для передачи данных, нужно создать ключи, которые должны быть в обеих устройствах
			1.1. ssh-keygen -t rsa -b 2048: генерирует ключи для ssh-подключений
			1.2. по умолчанию сохраняется в /home/username/.ssh/id_rsa
			1.3. ввод кодовой фразы для доступа к файлу: можно оставлять пустым
		2. теперь нужно отправить ключи на удаленное устройство
			осуществляется командой: ssh-copy-id user@backup_server
		3. для передачи резервного копирования создаем скрипт RSYNC_Backup.sh:
			#!/bin/bash

			rsync -avz -e ssh /path/to/mydirectory user@backup_server:/path/to/backup/directory
		4. с помощью команды даем скрипту необходимые разрешения + добавит защиты тому что другой пользователь не сможет его изменить:
			chmod +x RSYNC_Backup.sh
		5. создаем crontab для автоматической передачи резервной копии
			crontab -e
		6. настраиваем crontab: чтобы скрипт выполнялся каждый час в 0 минуту
			0 * * * * /path/to/RSYNC_Backup.sh

управление файловой системой:
	ext4 - файловая система по умолчанию для большинства систем Linux. баланс между производительностью, надежностью, поддержкой больших файлов
	архитектура файловой системы Linux:
		inode table - таблица, содержащая значения inodes
		inodes - структуры данных, содержащая метаданные о каждом файле и каталоге, включая разрешения, владельца, размер, временные метки
			не хранятся фактические данные или имя файла, но содержат указатели на блоки, где хранятся данные на диск
	команды:
		fdisk <options> - позволяет узнать данные о разделах диска
			примерный синтаксис: sudo fdisk -l
			опции:
				-l: для получения списка разделов на устройстве
		mount <disk> <address>: подразумевает привязку накопителя или раздела к папке
			редактирует файл по адресу: /etc/fstab
			примерный синтаксис: sudo mount /dev/sdb1 /mnt/usb
			команды для монтирования:
				mount: для получения списка подключенных файловых систем
				mount <diskname> <address>: для монтирования содержимого диска в каталог
				unmount <address>: для размонтировки данных
