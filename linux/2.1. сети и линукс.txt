сетевой интерфейс - точка подключения устройства к сети. может быть:
	eth0		Ethernet (проводной интерфейс)
	wlan0		Wi-Fi адаптер
	lo		Loopback (внутренняя сеть, 127.0.0.1)
	br0		Сетевой мост (прим. для контейнеров)
	vethXYZ		виртуальный Ethernet (внутри контейнера)

dns (domain name system) - система, которая переводит читаемые человеком имена сайтов в ip-адреса для компьютеров
	/etc/resolv.conf - содержатся сохраненные ip-адреса dns-серверов. если в нем нет, настраивается на уровне провайдера. у каждого провайдера свой DNS-сервер
	google public dns - открытый DNS-сервис, для перевода доменных имен в ip-адреса. его ip-адресом служит 8.8.8.8

контроль доступа к сети:
	NAC - система безопасности, обеспечивающая доступ к сети только авторизованным и соответствующим требованиям устройствам
		предотвращает несанкционированный доступ, утечку данных и другие угрозы безопасности
	существуют следующие технологии NAC:
		DAC - доступ по усмотрению владельца:
			владельцы ресурсов сами решают, кто может получить доступ
			гибко, но не безопасно, так как любой пользователь может дать доступ другому
		MAC - обязательный контроль доступа
			владельцы ресурсов не вправе назначать или давать доступ, только админ
		RBAC - контроль доступа на основе ролей
			пользователям назначаются роли, где каждая роль имеет свои разрешения

команды для работы с сетью:
	systemctl: для перезагрузки служб сетей
		примерный синтаксис: sudo systemctl restart networking
		команды:
			restart networking: позволяет перезагрузить сетевые службы
	ifconfig: для получения списка сетевых интерфейс - IP-адреса, маски подсетей, состояние
		примерный синтаксис: sudo ifconfig eth0 up
		команды:
			ifconfig: показать интерфейсы и их статус
			<interface> up: включить интерфейс
			<interface> 192.168.1.100: назначить ip-адрес
			<interface> 192.168.1.100 netmask 255.255.255.0: назначить ip-адрес с маской подсети
	ip: более новая замена ifconfig - для отображения или управления маршрутизацией, сетевыми устройствами, интерфейсами и туннелями
	route: установить маршрут по умолчанию для сетевого интерфейса, если они не идут через локальную сеть
		команды:
			add default gw 192.168.1.1 <interface>: для добавления маршрута (192.168.1.1)
	ping <remote_host>: для проверки связи между двумя устройствами. отправляет пакеты на удаленный хост и измеряет время возврата
	traceroute <remote_host>: позволяет отследить маршрут, по которому пакеты достигают удаленного хоста
	netstat: для отображения активных сетевых подключений и связанных с ними портов
	ss <options>: мощная утилита для анализа сетевых соединений. современная замена netstat
		предоставляет подробную информацию о текущих сетевых подключениях, открытых портах, используемых протоколах и состоянии сокетов
		опции: (можно сочетать вместе прим. -tulp)
			-t: показывает TCP-соединения
			-u: показывает UDP-соединения
			-l: отображает только слушающие (listen) сокеты
			-n: показывает адреса и порты в числовом формате
			-p: показывает процессы, связанные с сокетами
			-а: показывает все сокеты (включая установленные и слушающие)
			-4: показывает только IPv4-соединения
			-6: показывает только IPv6-соединения
	nmap <flag> <address>: для поиска открытых портов на целевой машине

программы и протоколы сетевой службы:
	OpenSSH - бесплатная реализация протокола SSH, позволяющий безопасную передачу данных и команд по сети
		имя пакета для установки: openssh-server
		файл конфигурации: /etc/ssh/sshd_config - позволяет изменить правила подключения клиентов к серверу
	NFS - протокол для управлениями файлов в удаленной системе
		имя пакета для установки: nfs-kernel-server
		файл конфигурации: /etc/exports - позволяет изменить правила доступа к файлу
		примерный синтаксис: '/home/cry0l1t3/nfs_sharing hostname(rw,sync,no_root_squash)' >> /etc/exports
		команды:
			rw: предоставляет доступ пользователям на чтение и доступ
			ro: предоставляет доступ пользователям только на чтение
			root_squash: ограничивает root-права до обычного пользователя
			no_root_squash: убирает ограничение на root-права
			sync: синхронизирует передачу данных только после сохранения файла
			async: асинхронная передача данных ускоряет процесс, но может привести к несогласованности в файловой системе (если изменения не были полностью зафиксированы)
		передача данных с целевой системы:
			mount 10.129.12.17:/home/john/dev_scripts ~/target_nfs		# передача файла target_nfs из системы 10.129.12.17
	Apache - программное обеспечение для развертывания веб-сервера. работает на порте 80
		обрабатывает HTTP-запросы от клиентов и отправляет им ответы, такие как HTML-страницы, файлы, изображения и т.д.
		имя пакета для установки: apache2
		содержит модули, которые можно настраивать и расширять для выполнения конкретных задач
		файл конфигурации: /etc/apache/apache2.conf - для указывания к каким файлам можно получить доступ и выполнять действия
			<Directory /var/www/html>			| речь идет о файлах находящихся в /var/www/html
				Options Indexes FollowSymLinks		| что можно использовать опции Indexes, FollowSymLinks
				AllowOverride All			| что изменения в файле могут быть отменены
				Require all granted			| что все пользователи имеют доступ к каталогу
			</directory>
			или имеется возможность отдельные параметры на уровне каталога с помощью файла .htaccess, который создается в нужном каталоге
		файл портов: /etc/apache2/ports.conf - для указывания альтернативного порта (вместо по умолчанию 80)
			при измененном порту к адресу, к URL добавляется значение порта: http://localhost:8080 - при указанном порту 8080
	веб-сервер Python - быстрая и простая альтернатива Apache. работает на порту TCP/8000 по умолчанию
		чаще используется для размещения одной папки для передачи в другую систему с помощью одной команды
		имя пакета для установки: python3
		примерный синтаксис: python3 -m http.server --directory /home/cry0l1t3/target_files
		опции:
			-m http.server <port>: запускает веб-сервер с доступом к папке в которой находимся. есть возможность указывания порта, на котором чтобы он работал
			-m http.server --directory /home/cry0l1t3/target_files: запускает веб-сервер с доступом к указанной папке
	OpenVPN - программное обеспечение для удаленного безопасного доступа к сетям
		шифрование, туннелирование, формирование трафика, маршрутизация сети и адаптация к динамическим сетевым средам
		имя пакета для установки: openvpn
		файл конфигурации: /etc/openvpn/server.conf - позволяет настроить шифрование, туннелирование, формирование трафика и т.д. по своему

работа с веб-серверами:
	сURL - инструмент для работы с URL, позволяет получать и отправлять данные через различные протоколы
		примерный синтаксис: curl www.example.com
		опции:
			<URL-address>: для получения HTML-кода
			-o output.html <URL-address>: для сохранения полученного HTML-кода
			-X POST -d "param1=value1&param2=value2" <URL-address>: флаг -X указывает HTTP (в данном случае POST), -d отправляет данные в теле запроса
			-H "Content-Type: application/json" -d '{"key": "value"}' <URL-address>: флаг -H добавляет заголовок Content-Type, -d отправляет данные в формате JSON
			-u username:password <URL-address>: для базовой авторизации (передача логина и пароля)
			-H "Authorization: YOUR_ACCESS_TOKEN" <URL-address>: добавление заголовка Authorization для работы с API, требующими токен
			-x <proxy-server> <URL-address>: для указывания прокси-сервера
			-T <filename> <URL-address>: для загрузки файла на сервер
			-I <URL-address>: для получения только заголовков ответа
			-k <URL-address>: для отключения проверки SSL-сертификата
	Wget - альтернатива cURL, позволяющая загружать файлы с FTP или HTTP серверов прямо из терминала
		при передаче URL-адреса, загружает и сохраняет локально

утилиты для защиты сети:
	iptables - утилита с гибкими возможностями настройки фаервола (IP-адреса, номера портов, протоколы)
		компоненты:
			1. таблицы tables:
				набор таблиц (правил), обьединенных по типу обработки сетевых пакетов
				таблица (правило)	задача
				filter			основное правило для разрешения или блокировки трафика
				nat			используется для перенаправления и изменения адресов
				mangle			позволяет изменять заголовки пакетов
				raw			используется для исключений из отслеживания соединений
			2. цепи chains:
				организуют таблицы (правила), в каком порядке следует фильтровать трафик
				есть два типа:
					встроенные - автоматически создаются при создании правил
						filter имеет цепь "входные данные - выходные данные - данные через хост"
							INPUT - OUTPUT - FORWARD
						nat имеет цепь "пришедшие данные - данные после маршрутизации перед отправкой - данные от хоста"
							PREROUTING - POSTROUTING
						mangle имеет цепь "до маршрутизации - входящие пакеты - пакеты через хост - пакеты после хоста - после маршрутизации"
							PREROUTING - INPUT - FORWARD - OUTPUT - POSTROUTING
					определенные пользователем цепи
			3. matches - матчи используются для создания критериев фильтрации сетевого трафика
				сопоставляются из отдельных критериев таких как: IP-адреса, порты, протоколы...
				флаги для создания критериев для проверки пакета:
					-p: проверить протокол для составления (tcp, udp, icmp..)
					-s <IP>: проверить IP-адрес источника
					-d <IP>: проверить IP-адрес получателя
					--dport: проверить порт назначения
					--sport: проверить исходный порт
					-m multiport <PORT1> <PORT2>: проверить нескольким портам
					-m: проверить состояние соединения (NEW, ESTABLISHED, RELATED) (новое, установленное, связанное)
					-m mark <number>: проверить маркировку
					-m mac <ADDRESS>: проверить по MAC-адресу
					-m string: проверить на наличие строки
					-m limit: проверить на заданный предел скорости
					-m conntrack: проверить на основе информации отслеживании соединений
					-m iprange: проверить на основе диапазона IP-адресов
			4. rules - правилом называется вся одно целая команда
				если правила определили пакет, цели (targets) определяют как быть пакету
				наиболее распространенные цели:
					ACCEPT - позволяет пройти пакету через фаервол до пункта назначения
					DROP - отбрасывает пакет молча
					REJECT - отбрасывает пакет, уведомляя об этом отправителя
					LOG - записывает информацию о пакете в системный журнал
					SNAT - изменяет IP-адрес отправителя
					DNAT - изменяет IP-адрес получателя
					MASQUERADE - изменяет IP-адрес отправителя при динамическом IP-адресе
					REDIRECT - перенаправляет пакеты на дпугой IP-адрес
					MARK - пометить пакет значением для будущего разделения с какой то целью от всех пакетов
		синтаксис команды для взаимодействий с правилами:
			iptables -t <table> <command> <chains> <matches> -j <target>
			-t <table>: для указания таблицы, по умолчанию без указания - filter
			<command>: для указания команды:
				-A: добавить правило в конец цепочки
				-I: добавить правило в начало цепочки
				-D: удалить правило
				-L: вывести правила
				-F: очистить цепочку
				-N: создать новую цепочку
				-X: удалить цепочку
			<chains>: в какой цепочке таблицы применять правило
			<matches>: матчи - условия, которым должен соответствовать пакет
			-j <target>: что делать с пакетом если он подходит по всем критериям
		команды для конфигурации iptables:
			sudo iptables-save > ~/iptables_backup.rules: команда для сохранения настройки iptables
			sudo iptables-restore < ~/iptables_backup.rules: команда для возврата сохраненных настроек

